


Pandas- Limpeza de dados de formato errado


Dados de formato errado

Células com dados em formato incorreto podem dificultar, ou até mesmo imposibilitar, a análise de dados.

Para corrigir isso, você tem duas opções: remover as linhas ou converter  todas as células nas colunas para o mesmo formato.


Converter em um formato correto

Em nosso Data Frame, temos duas células com o formato errado. Confira as linhas 22 e 26, a coluna 'Date' deve ser uma string que representa uma data:

Vamos tentar converter todas as células da coluna "Date" em datas.

O Pandas tem um to_datetime() método para isso:


Exemplo
Converter para data:

>>> import pandas as pd
>>> 
>>> # Carregar o arquivo CSV
>>> df = pd.read_csv('/home/moacyr/Projects/repo-python/python/pandas/17-data.csv')
>>> 
>>> # Converter a coluna 'Date' para string
>>> df['Date'] = df['Date'].astype(str)
>>> 
>>> df['Date'] = df['Date'].str.replace("'", "")  # Remover aspas simples
>>> df['Date'] = df['Date'].apply(lambda x: x if pd.isna(x) else (x[:4] + '/' + x[4:6] + '/' + x[6:]) if len(x) == 8 else x)
>>> 
>>> 
>>> # Agora aplicar a conversão para datetime
>>> df['Date'] = pd.to_datetime(df['Date'], errors='coerce')
>>> 
>>> # Exibir o DataFrame atualizado
>>> print(df.to_string())
    Duration       Date  Pulse  Maxpulse  Calories
0         60 2020-12-01    110       130     409.1
1         60 2020-12-02    117       145     479.0
2         60 2020-12-03    103       135     340.0
3         45 2020-12-04    109       175     282.4
4         45 2020-12-05    117       148     406.0
5         60 2020-12-06    102       127     300.0
6         60 2020-12-07    110       136     374.0
7        450 2020-12-08    104       134     253.3
8         30 2020-12-09    109       133     195.1
9         60 2020-12-10     98       124     269.0
10        60 2020-12-11    103       147     329.3
11        60 2020-12-12    100       120     250.7
12        60 2020-12-12    100       120     250.7
13        60 2020-12-13    106       128     345.3
14        60 2020-12-14    104       132     379.3
15        60 2020-12-15     98       123     275.0
16        60 2020-12-16     98       120     215.2
17        60 2020-12-17    100       120     300.0
18        45 2020-12-18     90       112       NaN
19        60 2020-12-19    103       123     323.0
20        45 2020-12-20     97       125     243.0
21        60 2020-12-21    108       131     364.2
22        45        NaT    100       119     282.0
23        60 2020-12-23    130       101     300.0
24        45 2020-12-24    105       132     246.0
25        60 2020-12-25    102       126     334.5
26        60 2020-12-26    100       120     250.0
27        60 2020-12-27     92       118     241.0
28        60 2020-12-28    103       132       NaN
29        60 2020-12-29    100       132     280.0
30        60 2020-12-30    102       129     380.3
31        60 2020-12-31     92       115     243.0
>>>

Como você pode ver no resultado, a data na linha 26 foi corrigida, mas a data vazia na linha 22 recebeu um valor NaT(Not a Time), em outras palavras, um valor vazio. Uma manaira de lidar com valores vazios é simplesmente remover a linha inteira.

Removendo Linhas

O resultado da conversão no exemplo acima nos deu um valor NaT, que pode ser tratado como um valor NULL, e podemos remover a linha usando o dropna() método.

Exemplo

Remova linhas com valor NULL na coluna "Date":

>>> df.dropna(subset=['Date'], inplace = True)
>>> 
>>> print(df.to_string())
    Duration       Date  Pulse  Maxpulse  Calories
0         60 2020-12-01    110       130     409.1
1         60 2020-12-02    117       145     479.0
2         60 2020-12-03    103       135     340.0
3         45 2020-12-04    109       175     282.4
4         45 2020-12-05    117       148     406.0
5         60 2020-12-06    102       127     300.0
6         60 2020-12-07    110       136     374.0
7        450 2020-12-08    104       134     253.3
8         30 2020-12-09    109       133     195.1
9         60 2020-12-10     98       124     269.0
10        60 2020-12-11    103       147     329.3
11        60 2020-12-12    100       120     250.7
12        60 2020-12-12    100       120     250.7
13        60 2020-12-13    106       128     345.3
14        60 2020-12-14    104       132     379.3
15        60 2020-12-15     98       123     275.0
16        60 2020-12-16     98       120     215.2
17        60 2020-12-17    100       120     300.0
18        45 2020-12-18     90       112       NaN
19        60 2020-12-19    103       123     323.0
20        45 2020-12-20     97       125     243.0
21        60 2020-12-21    108       131     364.2
23        60 2020-12-23    130       101     300.0
24        45 2020-12-24    105       132     246.0
25        60 2020-12-25    102       126     334.5
26        60 2020-12-26    100       120     250.0
27        60 2020-12-27     92       118     241.0
28        60 2020-12-28    103       132       NaN
29        60 2020-12-29    100       132     280.0
30        60 2020-12-30    102       129     380.3
31        60 2020-12-31     92       115     243.0
>>> 
